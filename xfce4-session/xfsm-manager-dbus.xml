<?xml version="1.0" encoding="UTF-8"?>

<!--
     TODO:

     * define errors and list what methods can throw which errors
     * be sure the states in both GetState() methods make sense,
       and see if there are others that should be included
     * should we include the SM client ID string in the ClientRegistered
       and/or ClientDisconnected() signals?
     * include a "ShutdownStarted" signal?
     * extra shutdown type for "safe suspend" aka "s2both"?
-->

<node name="/org/xfce/SessionManager">
    <interface name="org.xfce.Session.Manager">
        <annotation name="org.freedesktop.DBus.GLib.CSymbol"
                    value="xfsm_manager_dbus"/>
        <annotation name="org.freedesktop.DBus.GLib.ClientCSymbol"
                    value="xfsm_manager_dbus_client"/>

        <!--
             (String, String, String) org.xfce.Session.Manager.GetInfo()

             Returns:

             @name: The session manager's name.
             @version: The session manager's version.
             @vendor: The vendor releasing the session manager.
        -->
        <method name="GetInfo">
            <arg direction="out" name="name" type="s"/>
            <arg direction="out" name="version" type="s"/>
            <arg direction="out" name="vendor" type="s"/>
        </method>

        <!--
            String[] org.xfce.Session.Manager.GetCapabilities()

            Retrieves a list of stuff the session manager is
            capable of doing.  Current possibilities:
                suspend
                hibernate
                reboot
                shutdown
        -->
        <method name="GetCapabilities">
            <arg direction="out" type="as"/>
        </method>

        <!--
             ObjectPath[] org.xfce.Session.Manager.ListClients()

             Retrieves a list of session clients from the session
             manager, as a list of D-Bus object paths.  These
             object paths all support the org.xfce.Session.Client
             interface.
        -->
        <method name="ListClients">
            <arg direction="out" name="clients" type="ao"/>
        </method>

        <!--
             Unsigned Int org.xfce.Session.Manager.GetState()

             Queries the session manager for its current operating
             state.  Valid values are:
                 0  Startup: the session manager is starting up and
                    restoring clients from the previous session.
                 1  Idle: the session manager has started up and is
                    waiting for client events.
                 2  Checkpoint: the session manager is saving the
                    client list and instructing clients to save state.
                 3  Shutdown: the session manager is shutting down.
                 4  Shutdown Phase 2: the session manager is shutting
                    down and is allowing clients which have requested
                    extra time to save their state to do so.
        -->
        <method name="GetState">
            <arg direction="out" name="state" type="u"/>
        </method>

        <!--
             void org.Xfce.Session.Manager.Checkpoint(String session_name)

             @session_name: The name of the session to save.  Pass the
                            empty string ("") to use the name of the
                            currently-running session.

             Instructs the session manager to save state and save all
             client state, without ending the session.
        -->
        <method name="Checkpoint">
            <arg direction="in" name="session_name" type="s"/>
        </method>

        <!--
            void org.xfce.Session.Manager.SessionControl(String action,
                                                         Dict[] options)

            @action: Action to request.  Currently-recognized
                     values are:
                         show-logout-dialog
                         logout
                         suspend
                         hibernate
                         reboot
                         shutdown
            @options: An array of (String, Variant) pairs.  Currently-
                      recognized options are:
                          fast (bool): Whether or not to allow
                                       applications connected to the
                                       SM a chance to close cleanly.
                          allow-interact (bool): Whether or not to allow
                                                 applications connected
                                                 to the SM to interact
                                                 with the user during
                                                 shutdown.
                      These two options are ignored for all @action values
                      except 'reboot' and 'shutdown'.
        -->
        <method name="SessionControl">
            <arg direction="in" name="action" type="s"/>
            <arg direction="in" name="options" type="a{sv}"/>
        </method>

        <!--
             void org.xfce.Session.Manager.Shutdown(Unsigned Int type,
                                                    Boolean save)

             @type: Type of shutdown to request.  Valid values are:
                    0  Prompt user for type.
                    1  Log out of current session.
                    2  Shut down the computer/device.
                    3  Restart the computer/device.
                    4  Suspend the computer/device.
                    5  Hibernate the computer/device.
             @allow_save: Whether or not to give applications a
                          chance to save themselves, or to shut down
                          immediately.  Note that this parameter is
                          ignored for type==0.

             NOTE: This method is deprecated and should not be used in
             newly-written code.  See the SessionControl() method for
             a replacement.

             Instructs the session manager to shut down.  Type 0 will
             prompt the user for a shutdown type.  All other types will
             take immediate action without user input.

             Implementation note: types 2 through 5 may be implemented
             by simply passing the message along to a power management
             daemon after taking any SM-specific actions needed.
        -->
        <method name="Shutdown">
            <arg direction="in" name="type" type="u"/>
            <arg direction="in" name="allow_save" type="b"/>
        </method>

        <!--
             void org.xfce.Session.Manager.StateChanged(Unsigned Int old_state,
                                                        Unsigned Int new_state)

             @old_state: The SM's previous state.
             @new_state: The SM's new (current) state.

             Emitted when the session manager's state changes.
             See GetState() above for valid values for the
             arguments.
        -->
        <signal name="StateChanged">
            <arg name="old_state" type="u"/>
            <arg name="new_state" type="u"/>
        </signal>

        <!--
             void org.xfce.Session.Manager.ClientRegistered(ObjectPath client)

             @client: A D-Bus object path.

             Emitted when a new client is registered.
        -->
        <signal name="ClientRegistered">
            <arg name="client" type="o"/>
        </signal>

        <!--
             void org.xfce.Session.Manager.ShutdownCancelled()

             Emitted when a previously-started shutdown has been
             cancelled.
        -->
        <signal name="ShutdownCancelled"/>

        <!--
            void org.xfce.Session.Manager.CapabilitiesChanged(String[] caps_added,
                                                              String[] caps_removed)

            @caps_added: A list of new capabilities available.
            @caps_removed: A list of capabilities lost.

            Emitted when the list of capabilities is changed.
        -->
        <signal name="CapabilitiesChanged">
            <arg name="caps_added" type="as"/>
            <arg name="caps_removed" type="as"/>
        </signal>
    </interface>
</node>
